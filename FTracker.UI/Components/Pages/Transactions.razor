@page "/transactions"
@using Ftracker
@inject FinanceService FinService

<PageTitle>Transactions</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Transactions</MudText>

<MudTable Items="@_transactions" Hover="true" Striped="true" SortLabel="Sort by" SortChanged="SortChanged">
    <HeaderContent>
        <MudTh> <MudTableSortLabel SortBy="new Func<Transaction, object>(x => x.Amount)">Amount</MudTableSortLabel></MudTh>
        <MudTh>Category</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Transaction, object>(x => x.Description!)">Description </MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Transaction, object>(x => x.Date)">Date</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Amount">@context.Amount</MudTd>
        <MudTd DataLabel="Category">@context.Category?.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<Transaction> _transactions = new();

    protected override async Task OnInitializedAsync()
    {
        // It's good practice to provide a default sort order on initial load.
        _transactions = await FinService.GetTransactionsAsync(sortBy: "date", ascending: false);
    }

    private async Task SortChanged(SortDefinition<Transaction> sortDefinition)
    {
        string sortBy = sortDefinition.SortBy;

        // MudBlazor sets Descending=true when sorting descending, but
        // FinService expects an 'ascending' flag. Invert the value to match.
        _transactions = await FinService.GetTransactionsAsync(sortBy, ascending: !sortDefinition.Descending);
    }
}
